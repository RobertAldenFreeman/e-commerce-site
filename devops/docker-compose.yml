version: '3.7'
services:
  redis:
    image : redis:5.0.4
    ports:
      - "6379:6379"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - webnet
  gateway:
    image: marlonbustamante/gateway
    ports:
      - "4000:4000"
    deploy:
      replicas: 1
    networks:
      - webnet
    environment:
      - FRONT_END_HOST=http://frontend:3000
      - MESSANGER_HOST=http://messanger:5000
      - WEBSOCKET_HOST=http://websocket:6000/websocket
      - SERVER_HOST=http://server:4001
  frontend:
    image : marlonbustamante/react-demo
    ports:
      - "3000:3000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
  websocket:
    image : marlonbustamante/websocket-demo
    depends_on:
      - redis
    ports:
      - "4004:4004"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
  messanger:
    image : marlonbustamante/messanger-demo
    depends_on:
      - redis
      - mongodb
    ports:
      - "5000:5000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
      - MONGO_HOST=mongodb://mongodb:27017
  server:
    image : marlonbustamante/server-demo
    depends_on:
      - mongodb
    ports:
      - "4001:4001"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
    environment:
      - MONGO_HOST=mongodb://mongodb:27017
networks:
  webnet: